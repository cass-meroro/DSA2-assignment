import java.util.*;
import java.util.Map.Entry;

public class CompressionAlgo {
	
    //Stores the codes, character frequency and the nodes
	private static Map<Character, String> codes = new HashMap<>();
	private static Map<Character, Integer> frequencies = new HashMap<>();
	private static PriorityQueue<MinHeapNode> minHeap = new PriorityQueue<>();
	
    //Compression Algorithm
	public String compressor( String message) {
		String data = message;
		String encode = "";
		String decode = "";
        //Counts the frequency of the data
		count_frequency(data);
		HuffmanCodes(data.length());

		//Takes each character and put it in an array
		for (char c : data.toCharArray()) {
			encode += codes.get(c);
		}
        //Prints encoded message
		System.out.println("\nEncoded message"); 
		System.out.println(encode);
        //prints decoded message
		decode = decodeFile(minHeap.peek(), encode);
        //Clears 
		codes.clear();
        frequencies.clear();
        minHeap.clear();

        return decode;
	}
	// 
	private static void HuffmanCodes(int size) {
		for (Entry<Character, Integer> entry : frequencies.entrySet()) {
			minHeap.add(new MinHeapNode(entry.getKey(), entry.getValue()));
		}
		while (minHeap.size() != 1) {
            //Creates a tree of huffman
			MinHeapNode left = minHeap.poll();
			MinHeapNode right = minHeap.poll();
			MinHeapNode top = new MinHeapNode('$', left.freq + right.freq);
			top.left = left;
			top.right = right;
			minHeap.add(top);
		}
		storeCodes(minHeap.peek(), "");
	}
	
	private static void count_frequency(String str) {
		for (char c : str.toCharArray()) {
			frequencies.put(c, frequencies.getOrDefault(c, 0) + 1);
		}
	}
	
	private static void storeCodes(MinHeapNode root, String str) {
        //Stores the codes and for the character
		if (root == null) {
			return;
		}
		if (root.data != '$') {
			codes.put(root.data, str);
		}
		storeCodes(root.left, str + "0");
		storeCodes(root.right, str + "1");
	}
	
	private static String decodeFile(MinHeapNode root, String s) {
        //Decoding of the char
		String ans = "";
		MinHeapNode curr = root;
		int n = s.length();
		for (int i = 0; i < n; i++) {
			if (s.charAt(i) == '0') {
				curr = curr.left;
			} else {
				curr = curr.right;
			}
			if (curr.left == null && curr.right == null) {
				ans += curr.data;
				curr = root;
			}
		}
		return ans + '\0';
	}
	
}

class MinHeapNode implements Comparable<MinHeapNode> {
	char data;
	int freq;
	MinHeapNode left, right;
	
	MinHeapNode(char data, int freq) {
		this.data = data;
		this.freq = freq;
	}
	
	public int compareTo(MinHeapNode other) {
		return this.freq - other.freq;
	}
}
